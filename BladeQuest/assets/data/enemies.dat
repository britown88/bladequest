#Handy funcs
addColoredDaggerHit enemy color1 color2
   enemy > setAttackAnimation "dagger" > 
         setAttackColors (interpolateColorsToList color1 color2 3)
         
addDefaultDaggerHit enemy
   addColoredDaggerHit enemy (RGBA 255 255 255 255) (RGBA 128 128 128 255)

addColoredSwordHit enemy color1 color2
   enemy > setAttackAnimation "sword" > 
           setAttackColors (interpolateColorsToList color1 color2 3)
         
addDefaultSwordHit enemy
   addColoredSwordHit enemy (RGBA 255 255 255 255) (RGBA 128 128 128 255)
 
addColoredStaffHit enemy color1 color2   
   enemy > setAttackAnimation "staff" >
   	       setAttackColors (interpolateColorsToList color1 color2 6)
   	        
addDefaultStaffHit enemy
   addColoredStaffHit enemy (RGBA 255 255 255 255) (RGBA 128 128 128 255)
   
   
addAttackOnlyState enemy
	enemy > setEnemyAI (
		createAI "default" (createAIState ([e decision] ""))
		)
	
addBiteOnlyState enemy
	enemy > setEnemyAI (
		createAI "biteMe" (createAIState ([e decision] setAbility decision (e > getEnemyAbility "bite")))
		)	


###############################Super awesome triggers##################

fireSwitchedTrigger trigger enemy fn
  setSwitchCondition trigger false
  fn enemy

onHPFraction enemy numer denom fn 
  \triggerRun <- (createSwitchCondition true)
  createTrigger {triggerRun, getOnDamageReceivedEvent enemy} (
  [trigger] (|(enemy > getHP) > less (enemy > getStat "MaxHP" > multiply numer > divide denom)
  | equals true : fireSwitchedTrigger triggerRun enemy fn
  | equals false : ""
  ))
  
  
  ######################################################################

RandomRecruitAction e decision
   setAbility decision (|randomRoll 100
    |greater 33  : (e > getEnemyAbility "specialmegakick")
    |greater 66  : (e > getEnemyAbility "dynamosupernova")
    |greater 100 : (e > getEnemyAbility "climacticfinisher")
   )

RecruitDerpState enemy
	enemy > setEnemyAI (
		createAI "RAAAAAAAAAAAAAAAH" (createAIState RandomRecruitAction)
		)	


retaliateState enemy decision
     switchEnemyState enemy "default"
     decision > setAbility (enemy > getEnemyAbility "bite")
     
switchToRetaliate enemy
	switchEnemyState enemy "retaliate"     
     #interruptCurrent 0 #ignored arg
    # addInterruptingAbility enemy (getCurrentBattleActor 0) (getEnemyAbility enemy "bite")
     
createSwitchToRetaliateTrigger enemy     
     createTrigger (getOnPhysicalHitEvent enemy) ([trigger] switchToRetaliate enemy)
     
makeRatAI enemy
   enemy > setEnemyAI (
           createAI "default" (createAIState ([e decision] "")) > 
           addAIState "retaliate" (createAIState retaliateState)) >
           onBattleStartRun createSwitchToRetaliateTrigger 
   


###########################ENEMIES###################################################

#
\rat <- (addEnemy "rat" "Rat" "rat" >
setEBaseStats 10 1 1 1 >
addDefaultStaffHit >
setELevel 5 >
setGold 23 >
setItems "potion" 25 "antidote" 85 true >
modStat "MaxHP" -12 >
modStat "BattlePower" -1 >
makeRatAI >
addEAbility "bite" >
setEShadow (createShadow 40 36 15))

#
\guard <- (addEnemy "guard" "Guard" "guard" >
addDefaultSwordHit >
setEBaseStats 10 10 10 10 >
setELevel 25 >
addAttackOnlyState >
setGold 1200 >
setEShadow (createShadow 38 24 32 > nudgeX -4))

############HAWK AI#############

HawkAI enemy
   enemy > setEnemyAI (
           createAI "hawkAI" (createAIState ([e decision]
                (|randomRoll 100 
                 |greater 70   : "" #do nothing, just attack 
           		 |greater 100  : decision > setAbility (e > getEnemyAbility "gale")
           ))))

##############################
#
\hawk <- (addEnemy "hawk" "Hawk" "hawk" >
addDefaultDaggerHit >
setEBaseStats 3 3 3 3 >
setELevel 7 >
HawkAI >
setItems "potion" 25 "potion" 75 true >
modStat "MaxHP" -30 >
modStat "Speed" 6 >
modStat "BattlePower" -2 >
modStat "Intelligence" -1 >
setGold 32 >
addEAbility "gale" >
setEShadow (createShadow 44 14 40 > addElevation 16))

#
\spud <- (addEnemy "spud" "Spud" "spud" >
addDefaultDaggerHit >
setEBaseStats 3 3 3 3 >
setItems "potion" 10 " " 0 true >
setELevel 5 >
modStat "BattlePower" -1 >
addAttackOnlyState >
setGold 22 >
setEShadow (createShadow 31 16 22))

\spud2 <- (addEnemy "spud2" "Spud" "spud" >
addDefaultDaggerHit >
setEBaseStats 3 3 3 3 >
setItems "potion" 10 " " 0 true >
setELevel 6 >
modStat "MaxHP" -5 >
modStat "BattlePower" -1 >
addAttackOnlyState >
setGold 32 >
setEShadow (createShadow 31 16 22))

################BUNNY AI##############

LeafyBunnyAI enemy
   enemy > setEnemyAI (
           createAI "leafermadness" (createAIState ([e decision]
                (|randomRoll 100 
                 |greater 30   : "" #do nothing, just attack
                 |greater 70   : decision > setAbility (e > getEnemyAbility "maddeningeyes") 
           		 |greater 100  : decision > setAbility (e > getEnemyAbility "leafygreens")
           ))))

#####################################


\leafbunny <- (addEnemy "leafbunny" "Leafy Bunny" "leafbunny" >
addDefaultDaggerHit >
setEBaseStats 3 3 3 3 >
setELevel 6 >
LeafyBunnyAI >
setGold 52 >
setItems "tranquilizer" 50 "tranquilizer" 85 true >
modStat "MaxHP" -14 >
modStat "BattlePower" -2 >
addEAbility "leafygreens" >
addEAbility "maddeningeyes" >
setEShadow (createShadow 42 12 25))

#######################SAYTR AI################

SatyrLeadWith e decision attack
	decision > setAbility (e > getEnemyAbility attack)
    switchEnemyState e "tryReversal"

SatyrAI enemy
   enemy > setEnemyAI (
           createAI "base" (createAIState ([e decision]
                (|randomRoll 100 
                 |greater 60   : "" #basic attack
                 |greater 70   : SatyrLeadWith e decision "provoke"  
           		 |greater 100  : SatyrLeadWith e decision "trickery"
           ))) >
           addAIState "tryReversal" (createAIState ([e2 d2]
               d2 > setAbility (e2 > getEnemyAbility "satyrreversal")
               switchEnemyState e2 "base"               
           )))

################################################
\satyr <- (addEnemy "satyr" "Satyr" "satyr" >
addDefaultDaggerHit >
setEBaseStats 10 10 10 10 >
setELevel 10 >
modStat "MaxHP" 600 >
modStat "BattlePower" -2 >
SatyrAI >
setBoss >
addEStatusImmunity "confuse" >
setGold 864 >
setItems "potion" 100 "runningshoes" 100 true >
addEAbility "satyrreversal" >
addEAbility "provoke" >
addEAbility "trickery" >
setEShadow (createShadow 71 34 50 > nudgeX -11))


#######BAT AI######

setUseDrainState enemy
   enemy > setEnemyAI (
           createAI "useDrain" (createAIState ([e decision] 
           		decision > setAbility (e > getEnemyAbility "drain")
           ))) 
 

#######END AI####
#
\bat <- (addEnemy "bat" "Bat" "bat" >
addDefaultDaggerHit >
setEBaseStats 5 10 8 3 >
setELevel 7 >
setGold 42  >
setUseDrainState >
setItems "potion" 50 " " 0 true >
addEAbility "drain" >
modStat "MaxHP" -30 >
setEShadow (createShadow 34 12 30 > addElevation 16))

#slightly stronger bats
\bat2 <- (addEnemy "bat2" "Bat" "bat" >
addDefaultDaggerHit >
setEBaseStats 5 10 8 3 >
setELevel 7 >
setGold 60  >
setUseDrainState >
setItems "potion" 50 " " 0 true >
addEAbility "drain" >
modStat "MaxHP" -30 >
modStat "MagicPower" 2 >
setEShadow (createShadow 34 12 30 > addElevation 16))

#
\recruit <- (addEnemy "recruit" "Recruit" "recruit" >
addDefaultSwordHit >
setEBaseStats 10 10 10 10 >
setELevel 8 >
modStat "BattlePower" -3 >
modStat "MaxHP" 150 >
setGold 250 >
setBoss >
setItems "potion" 100 "silversword" 100 true >
RecruitDerpState >
addEAbility "specialmegakick" >
addEAbility "dynamosupernova" >
addEAbility "climacticfinisher"  >
setEShadow (createShadow 44 28 21))



#####################ROLAND!################


RolandShatter returnstate target e decision
	decision > setAbility (e > getEnemyAbility "shatter")
	decision > setTarget target
    switchEnemyState e returnstate
    
   
RolandFrozenGrip returnstate target e decision
	decision > setAbility (e > getEnemyAbility "frozengrip")
	decision > setTarget target
    switchEnemyState e returnstate
    
RolandEntomb returnstate switchto e decision
    \frozenfool <- (getRandomTarget e "SingleEnemy")
	decision > setAbility (e > getEnemyAbility "entomb")
	decision > setTarget frozenfool
	setAIState (getAI e) "attackFn" (createAIState (switchto returnstate frozenfool)) 
    switchEnemyState e "attackFn"    
    
RolandRoundOne e decision
    (|randomRoll 100   
	 |greater 80 :  RolandEntomb "base" RolandShatter e decision
	 |greater 100 : "")    
    
    
TryFrozenGrasp returnstate e decision otherwise
	\frozenPlayers <- (getPlayersWithStatus "frozen")
  	(|isEmpty frozenPlayers
  	 |equals false : RolandFrozenGrip returnstate (head frozenPlayers) e decision
  	 |equals true : otherwise e decision
    )
    
RandomRoundTwoDecision e decision
    (|randomRoll 100   
	 |greater 30 :  ""  #basic attack
	 |greater 55 : 
	 	   decision > setAbility (e > getEnemyAbility "chill")
		   decision > setTarget e
     |greater 100 : RolandEntomb "base2" RolandFrozenGrip e decision)
     
RolandRoundTwo e decision
	TryFrozenGrasp "base2" e decision RandomRoundTwoDecision
     
RandomRoundThreeDecision e decision
    (|randomRoll 100   
	 |greater 20 : RolandEntomb "base3" RolandShatter e decision
     |greater 40 : RolandEntomb "base3" RolandFrozenGrip e decision
	 |greater 55 : 
	 	   decision > setAbility (e > getEnemyAbility "chill")
		   decision > setTarget e     
     |greater 80 : decision > setAbility (e > getEnemyAbility "icebarrage")
     |greater 100 : "" #basic attack
     )     
     
RolandRoundThree e decision
	TryFrozenGrasp "base3" e decision RandomRoundThreeDecision     
    
RolandAI enemy
   enemy > setEnemyAI (
           createAI "base" (createAIState RolandRoundOne) >
           addAIState "base2" (createAIState RolandRoundTwo) >
           addAIState "base3" (createAIState RolandRoundThree) >           
           addAIState "attackFn" (createAIState ([e dec] ""))
      ) 
      

RolandIceBarrageAI enemy
   enemy > setEnemyAI (
           createAI "base" (createAIState ([e dec]
           dec > setAbility (e > getEnemyAbility "icebarrage")
           )))
      
RolandTriggers roland      
	onHPFraction roland 4 5 ([e]  #at 4/5ths hp...
		addNextAbility e e (temporaryAbility "" "" "Single" 0 > 
  		add  (messageAction "Roland: \nSo you're not completely useless.") >
  		add  (messageAction "Roland: \nBut can you pick up the pace?"))
  		switchEnemyState e "base2")
	onHPFraction roland 1 4 ([e]  #at 1/4ths hp...
		addNextAbility e e (temporaryAbility "" "" "Single" 0 > 
  		add  (messageAction "Roland: \nNot bad, but now witness true power!"))
  		switchEnemyState e "base3")
	roland
	
	
#############################################

\rolandbattle <- (addEnemy "eroland" "Roland" "eroland" >
addColoredSwordHit  (RGBA 105 212 213 255) (RGBA 165 242 243 255) >
setEBaseStats 10 10 10 10 >
setELevel 16 >
modStat "BattlePower" -3 >
modStat "Fire" -20 >
modStat "Water" 155 >
modStat "MaxHP" 3000 >
setGold 2500 >
setBoss >
RolandAI >
addEAbility "shatter" >
addEAbility "entomb"  >
addEAbility "frozengrip"  >
addEAbility "icebarrage" >
addEAbility "chill" >
setItems "potion" 100 "frostrapier" 100 true >
onBattleStartRun RolandTriggers > 
setEShadow (createShadow 74 30 43 > nudgeX 16))
